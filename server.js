var express = require('express');
var path = require('path');
var app = express();
var server = require('http').Server(app);
var io = require('socket.io')(server);
var bodyParser = require("body-parser");
var five = require('johnny-five');

//Here we are configuring express to use body-parser as middle-ware.
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

server.listen(8080);

console.log("Started back end...")

app.use(express.static(path.join(__dirname, 'public')));

// app.get('/', function (req, res) {
//   res.sendfile(__dirname + '/index.html');
// });

// app.post('handle',function(request,response){
//   // var query1=request.body.var1;
//   // var query2=request.body.var2;
//   console.log(request);
// });

io.on('connection', function (socket) {
  console.log("You connected. Congrats.");
  // sendStarter();
  // socket.emit('news', { hello: 'world' });

  socket.on('data', function (data) {
    console.log(data);
  });
  socket.on('robot', function(behaviour) {
    doRobotMotion(behaviour); // stub
  })
});


//////////////////////////////////////////////////////////////////////////////////////////
// Motor 
// 
//////////////////////////////////////////////////////////////////////////////////////////
var boardOptions = {
  repl: false,
}
var board = new five.Board(boardOptions);
var servo;
board.on("ready", function() {
  servo = new five.Servo(10);

  // Servo alternate constructor with options
  /*
  var servo = new five.Servo({
    id: "MyServo",     // User defined id
    pin: 10,           // Which pin is it attached to?
    type: "standard",  // Default: "standard". Use "continuous" for continuous rotation servos
    range: [0,180],    // Default: 0-180
    fps: 100,          // Used to calculate rate of movement between positions
    invert: false,     // Invert all specified positions
    startAt: 90,       // Immediately move to a degree
    center: true,      // overrides startAt if true and moves the servo to the center of the range
  });
  */

  // Add servo to REPL (optional)
  // this.repl.inject({
  //   servo: servo
  // });


  // Servo API

  // min()
  //
  // set the servo to the minimum degrees
  // defaults to 0
  //
  // eg. servo.min();

  // max()
  //
  // set the servo to the maximum degrees
  // defaults to 180
  //
  // eg. servo.max();

  // center()
  //
  // centers the servo to 90Â°
  //
  // servo.center();

  // to( deg )
  //
  // Moves the servo to position by degrees
  //
  // servo.to( 90 );

  // step( deg )
  //
  // step all servos by deg
  //
  // eg. array.step( -20 );

  // servo.sweep();

  start()
});

var sampen25 = [
  0.6961483200250344,
  0.852429724782817,
  0.4677671492726112,
  0.3215272248732939,
  0.14321999793422258,
  0.8635595557631617,
  0.7173617517579327,
  0.5384682759940852,
  0.7705070993151678,
  0.2940721407861362,
  0.6522360515773836,
  0.8367313984318399,
  0.23564428490577538,
  0.6830124986713159,
  0.9572915142345197,
  0.2813192155380787,
  0.45190309432295805,
  0.3868819340661168,
  0.021213809992758348,
  0.5438173382158366,
  0.7337984631260365,
  0.18558507210555442,
  0.46053208520959377,
  0.8577666740710009,
  0.5985482082494289,
  0.6745652745337364,
  0.288572184204816,
  0.5113410804281497,
  0.27804330739068317,
  0.9182891946558838,
  0.2596769550759167,
  0.08759418301715627,
  0.21927571250253997,
  0.9611971678918211,
  0.2534395889166089,
  0.7958348994366529,
  0.11375151911157533,
  0.5308934420551741,
  0.326570552752389,
  0.0814249616129834,
  0.6589640258639458,
  0.47941161711176583,
  0.8270216058607199,
  0.5977398688040461,
  0.25668305161146765,
  0.3532554760961447,
  0.19894221312720284,
  0.0565542284402164,
  0.8439024409533257,
  0.13867613255534672,
  0.5749000645902583,
  0.7531806002391398,
  0.47681937018455134,
  0.5987923272387363,
  0.848698796807738,
  0.9020146732464801,
  0.7432592824858976,
  0.04724365615085535,
  0.7414028096794208,
  0.014939959521023893,
  0.7480926125209089,
  0.5342591963233857,
  0.12509780855366004,
  0.5203623374248866,
  0.23066372495858145,
  0.6390041128065941,
  0.37036413497010545,
  0.25704856890085104,
  0.5162645052406343,
  0.3913313725517249,
  0.9312859936581597,
  0.7657039891962525,
  0.6875646439734459,
  0.13136773342148944,
  0.594617699502798,
  0.8229582779249808,
  0.028211306046746376,
  0.9036724631715191,
  0.8463471803643131,
  0.555831438182965,
  0.3606065216144356,
  0.5324281602911484,
  0.8406305201294079,
  0.8837197436136651,
  0.35187876618013825,
  0.8099067523918073,
  0.9020147769717501,
  0.15252461581899046,
  0.9178194516215198,
  0.9393914242214874,
  0.4077113651391757,
  0.6400646056159703,
  0.49878254844718384,
  0.8365563882829575,
  0.2602125117364976,
  0.4123503107100559,
  0.020347345548808793,
  0.4522170676830264,
  0.18554554179214933,
  0.11697971538282004,
  0.1596565435320142,
  0.703904299390016,
  0.9619136677252945,
  0.7416671146522363,
  0.9909768419531115,
  0.8775882364951592,
  0.06610875684955231,
  0.2852154723972741,
  0.44737108118142666,
  0.04824192452125975,
  0.8360841016930892,
  0.4740310902791144,
  0.6541942329006654,
  0.05429848592480302,
  0.7320531486376003,
  0.6904910707317802,
  0.6918456715056364,
  0.038942343655109735,
  0.06217943663655057,
  0.5826637972496139,
  0.047251844253800246,
  0.6038313841838313,
  0.4279039557163343,
  0.6133359204607693,
  0.6166435429735253,
  0.10945068360538235,
  0.16272398952522893,
  0.473960671179236,
  0.29422361021925103,
  0.5594038018374119,
  0.29420437936004484,
  0.4899124282847678,
  0.39239697611702773,
  0.2867654358431446,
  0.9133941850325934,
  0.36704387686711537,
  0.4532664699733351,
  0.7363933815323507,
  0.8439283237474712,
  0.6455939651826028,
  0.6013362071397419,
  0.5684280949603906,
  0.3027891457678682,
  0.14222130271439404,
  0.5543155185100103,
  0.456690367912703,
  0.3161962884596351,
  0.5644495772117971,
  0.18048893272227784,
  0.3211769274075289,
  0.17819104300890165,
  0.7491326905805862,
  0.5556876142567138,
  0.29995460607629787,
  0.16497249243090384,
  0.48677940681943077,
  0.30589135832702485,
  0.34335424277824267,
  0.6719445296151408,
  0.19721021861271637,
  0.647066112236693,
  0.793687763118767,
  0.030539555360211912,
  0.004102203529829929,
  0.3848997148159874,
  0.4531574299115043,
  0.41123336995121884,
  0.8371428593833202,
  0.14291312455753535,
  0.03395665370040102,
  0.9590827443609875,
  0.7304849518210951,
  0.3086447642835485,
  0.4500477030843404,
  0.9576601030157982,
  0.9511512285361684,
  0.34494503539144394,
  0.9621624145306561,
  0.735912467809808,
  0.953058979811041,
  0.9872470175957474,
  0.057456394979751524,
  0.22279448742257824,
  0.6038009053423534,
  0.31019618379157454,
  0.5898800029292742,
  0.45958641957261015,
  0.5424871755818819,
  0.6325568107564724,
  0.04740562067533649,
  0.7007942860303442,
  0.18665583981686207,
  0.6422165525333968,
  0.6855263335796972,
  0.6072876695863588,
  0.6216242910063366,
  0.13598453362083784,
  0.11179710128279408,
  0.3586600407910776,
  0.39347938255029247,
  0.9151820646073858,
  0.3152751140215442,
  0.13194088900929712,
  0.676627672262239,
  0.32823059490521234,
  0.8799113539934998,
  0.481457565808615,
  0.06140820676343106,
  0.5330658532049198,
  0.1315755800170797,
  0.43125335452082925,
  0.07526278941913722,
  0.6715380308112608,
  0.9410398551801129,
  0.8666006263606538,
  0.057231783603408526,
  0.1629904606953586,
  0.38149578961484165,
  0.6536797130239604,
  0.9940204374962263,
  0.4839634863103536,
  0.13182674680120432,
  0.6553886296507403,
  0.9236602144377297,
  0.5347769245476546,
  0.9575178895781681,
  0.4012425041222736,
  0.48937561329391066,
  0.5525554831619823,
  0.6132234344439922,
  0.3924153607724793,
  0.34659692052024427,
  0.6517436847106249,
  0.4560682913157539,
  0.36229458843738127,
  0.6534903975833343,
  0.5118012046933657,
  0.22114609739849767,
  0.09848958169974997,
  0.4909133510971265,
  0.42410280973689696,
  0.02652101471989421,
  0.5856604393058495,
  0.6186542925731024,
  0.1025857850650248,
  0.7712954824790876,
  0.4633562895109514,
  0.33723314985008146,
  0.8162477822600843,
  0.276809410912099,
  0.00020936937390203525];

var sampen75 = [
  0.10327162087147557,
  0.7939289617976558,
  0.6303777487918905,
  0.9492693284308191,
  0.853014572624442,
  0.22969379930815903,
  0.5609100222571798,
  0.8132397676916883,
  0.8201416214380696,
  0.6406121651223335,
  0.8162227856097602,
  0.5214660837892928,
  0.430063356094348,
  0.09351619614784867,
  0.12741666631003046,
  0.27906482778513064,
  0.3776237513099574,
  0.8049561075759157,
  0.34536869357264,
  0.5038218254166397,
  0.891977678401161,
  0.4808489444335329,
  0.6456458550610316,
  0.8632198249927795,
  0.8177435161310298,
  0.7073267545947743,
  0.8154837928894028,
  0.17810750103810324,
  0.941394468729283,
  0.8795915562360372,
  0.5587991295320484,
  0.7851039878277083,
  0.6503777456238988,
  0.48096996987641005,
  0.5985419730924479,
  0.2902124432413403,
  0.8999813064756622,
  0.926310975513391,
  0.9085984026255559,
  0.1578236719245132,
  0.04747878497433344,
  0.5299090638767121,
  0.6996521719631704,
  0.06187427890526398,
  0.04091283445156768,
  0.5719210176870319,
  0.11969658948566242,
  0.47104332575144847,
  0.7136729838923278,
  0.8557824615680975,
  0.0022612442637018892,
  0.574510535122428,
  0.924074423329751,
  0.3790662480987369,
  0.24627674143811606,
  0.607434875065521,
  0.27563685290336215,
  0.9077011044809922,
  0.4123979185870491,
  0.5902581377786471,
  0.19072987582059353,
  0.1849935470875741,
  0.7864886345985604,
  0.5689643110348,
  0.7193013276846331,
  0.5067591749282511,
  0.7741551484488082,
  0.7927276375454334,
  0.21937333620591637,
  0.0023505399976077035,
  0.2153750360276201,
  0.1492954888409448,
  0.6480798408379207,
  0.638207855235834,
  0.4876524135495287,
  0.3258728580593365,
  0.8476684785288845,
  0.7751311747817875,
  0.43633191997035825,
  0.10255557803778093,
  0.7963969446579742,
  0.20763316283261024,
  0.6952723653170402,
  0.9737518740871353,
  0.8680120612121016,
  0.836435943399422,
  0.5793163478056009,
  0.6236913366131258,
  0.5272226976821286,
  0.1146456156480149,
  0.2604724997622835,
  0.16262429665082367,
  0.40396423222432365,
  0.4902892742758168,
  0.5397061667993648,
  0.3558781052386165,
  0.7242937428773979,
  0.6032949108588684,
  0.7896909857435848,
  0.2625049325638209,
  0.007279879638619868,
  0.8604054955477053,
  0.7129048613421411,
  0.553677754514182,
  0.6533458669438829,
  0.5427903058314446,
  0.7508034476367746,
  0.2684180898803532,
  0.4196119169873973,
  0.8579995014298458,
  0.024635476875950246,
  0.9261389801943805,
  0.42271157682325977,
  0.5323949373239466,
  0.9544955232046526,
  0.04401415263446228,
  0.3037393697707951,
  0.9625709708024771,
  0.8557583373073713,
  0.7022667308262117,
  0.09521733616670347,
  0.854138731059973,
  0.4876577001093958,
  0.9964037696601581,
  0.003780603156847362,
  0.3917654894432693,
  0.2949532764794508,
  0.07413318310256667,
  0.3080522402790663,
  0.6326174407413945,
  0.09709179708423388,
  0.1890602688420573,
  0.3936173360638646,
  0.689790603426362,
  0.9246566586801489,
  0.2805019195275875,
  0.8762857255620008,
  0.06195463713117644,
  0.6058721608475113,
  0.5691848759912829,
  0.516097186856204,
  0.35380355886703685,
  0.7783864042425769,
  0.7218466020820747,
  0.5176467082374854,
  0.21892375161230393,
  0.05915802836998085,
  0.38795721671017513,
  0.10627746451198583,
  0.17250485503302093,
  0.9953222273162209,
  0.9421674239777353,
  0.07144021840377679,
  0.7633965142337593,
  0.5166126254609673,
  0.2050245215008647,
  0.8152983504398477,
  0.9703541226983178,
  0.8826731806068332,
  0.2807667154475727,
  0.008308638030317006,
  0.35482091967237495,
  0.7840351568283995,
  0.10567358292339002,
  0.16626574523727689,
  0.09236069165412975,
  0.12113645369784498,
  0.14486627278995368,
  0.9344635347559209,
  0.5390343458353019,
  0.002590137922846125,
  0.6315606892266322,
  0.8047836216258336,
  0.30241993173593573,
  0.32392054091170375,
  0.5343980050013525,
  0.6790227492172469,
  0.1978382212733002,
  0.5233906881562426,
  0.12156302453361212,
  0.39213970162764933,
  0.3929897305695149,
  0.9177700539648291,
  0.5803242404457163,
  0.11762315833579828,
  0.2845494033180819,
  0.017849935770357317,
  0.1846985283408995,
  0.3342129979277998,
  0.7059972022632864,
  0.24996892552000938,
  0.46815994002009265,
  0.740094999560163,
  0.47424259298123184,
  0.3663374176463404,
  0.7481591681758356,
  0.37597507489665416,
  0.29388820370611757,
  0.09504468667773325,
  0.5236752149822131,
  0.8777313589620983,
  0.044380494225443656,
  0.8263046871447289,
  0.4724129259076941,
  0.41896479795417074,
  0.29634264535372434,
  0.4073273310907244,
  0.16457117451770376,
  0.6708782056152282,
  0.5432219671133554,
  0.5119539273157737,
  0.9632183931389091,
  0.5532872210623263,
  0.37821571413928623,
  0.08598863307626581,
  0.2683975657480342,
  0.39688091644319123,
  0.060359333840608875,
  0.5399399375566533,
  0.4451198066755161,
  0.8771726672500697,
  0.2714166858528996,
  0.3763044892436297,
  0.3528670594075224,
  0.06398963160295468,
  0.991897736587366,
  0.8206018954634309,
  0.79291573864382,
  0.9225247805568286,
  0.5426129300104604,
  0.24869942583993154,
  0.6049161352403879,
  0.9254191774557178,
  0.18954037442397997,
  0.37918301988575553,
  0.11491008737437935,
  0.46428555029751417,
  0.2422387220291916,
  0.6945385012950213,
  0.4093438849214107,
  0.8458024439000705,
  0.9801401681446223,
  0.9770626697696733,
  0.7330558963399288,
  0.8252731156024681,
  0.5136314932165252,
  0.7993481316637975,
  0.5916707625344194,
  0.7295967414734832,
  0.36688967745911094,
  0.9611055858889955,
  0.5850861989621695,
  0.11149107078162179,
  0.9286371769453994,
  0.4308867109710086,
  0.5514125956990298,
  0.877655637671673,
  0.1909841975769594,
  0.5993911788089733,
  0.2123845364320639,
  0.21210801851906613,
  0.9637083667694436,
  0.9960247459686481,
  0.9681379614168163,
  0.8822737590189345,
  0.9981049224665667,
  0.10562611773044861,
  0.6836802628194348,
  0.1942383353919519,
  0.022128691064768558,
  0.605662933769595,
  0.648952566747248,
  0.31605780016919394,
  0.34225161135319093,
  0.7267542792645431,
  0.4463137871345465,
  0.350235883626408,
  0.5294515238712564,
  0.9704651928554772,
  0.6813599685745936,
  0.4972314449683354,
  0.940545202206545,
  0.3156471879197551,
  0.397154837856430
];


var behaviour_00 = sineBehaviour();
var behaviour_01 = generateBehaviour(sampen25);
var behaviour_02 = generateBehaviour(sampen75);
var behaviour_03 = randomBehaviour();
var behaviour_04 = randomBehaviour();
var behaviour_05 = randomBehaviour();
var behaviour_06 = randomBehaviour();
var behaviour_07 = sineBehaviour();
var behaviour_08 = sineBehaviour();
var behaviour_09 = sineBehaviour();
var behaviour_10 = sineBehaviour();
var behaviour_11 = sineBehaviour();
var behaviour_12 = sineBehaviour();
var behaviour_13 = sineBehaviour();
var behaviour_14 = sineBehaviour();
var behaviour_15 = sineBehaviour();

var behaviours = [
  behaviour_00,
  behaviour_01,
  behaviour_02,
  behaviour_03,
  behaviour_04,
  behaviour_05,
  behaviour_06,
  behaviour_07,
  behaviour_08,
  behaviour_09,
  behaviour_10,
  behaviour_11,
  behaviour_12,
  behaviour_13,
  behaviour_14,
  behaviour_15,
]

// The base behaviour to play constantly
var base_behaviour = behaviour_00;

// The test behaviour to mix in 
var mix_behaviour  = behaviour_01;

var easeIn  = false;
var easeOut = false;

// Max number of frames before reset to zero
var maxframe = 240;//240
// Initialize the frame count
var frame = 0;
// Frames per second
var fps = 60;

// Called when the server starts
function start() {
  setInterval(function(){
    doMotor();
  }, Math.round(1000 / fps));
};

// send the motor the next position value
function doMotor() {
  tick();
  var pos = getPosition(frame)
  servo.to(pos);
  //console.log(pos);
}

// Tick the clock, mod to maxframe
function tick() {
  frame = frame + 1;
  if (frame > maxframe) {
    frame = 0;
  }
}

// Return position for this frame
function getPosition(f) {
  var w = getWeight(f);
  var pos = (w * base_behaviour[f]) + ((1.0 - w) * mix_behaviour[f])
  return pos;
}

// Weighting function
function getWeight(f) {
  if (easeIn) {
    console.log('playing weird behaviour');
    return (f / maxframe);
  } 
  else if (easeOut) {
    console.log('playing weird behaviour');
    return (1.0 - (f / maxframe));
  }
  else {
    return 1.0;
  }
};

// set a timeout to change the behaviour
// b : index of behaviour to mix in
function doRobotMotion(b) {
  console.log(b);
  var r = Math.random() * (15 * 1000);
  mix_behaviour = behaviours[b];
  setTimeout(function(){
    frame = 0;
    // mix = true;
    easeIn = true;
    easeOut = false;
  }, r);

  setTimeout(function(){
    frame = 0;
    // mix = true;
    easeIn = false;
    easeOut = true;
  }, r + (10 * 1000));


  setTimeout(function(){
    frame = 0;
    // mix = true;
    easeIn = false;
    easeOut = false;
  }, r + (12 * 1000));
  // setTimeout(function(){
  //   mix = true;
  // }, r);

  // setTimeout(function(){
  //   mix = false;
  // }, r + (30 * 1000));
  
  // // start mixing in the behaviour in r seconds, 0 < r < 30 seconds
  // setTimeout(function(){
  //   // make sure mixing starts from 0
  //   frame = 0;
  //   mix_behaviour = behaviours[b];
  // }, r);

  // // 
  // setTimeout(function(){
  //   // max sure mixing 
  //   frame = Math.round(maxframe / 2);
  //   mix_behaviour = behaviours[0];
  // }, r);

}


////////////////////////////////////////////////////////////////////
// Behaviour generation functions
// 
////////////////////////////////////////////////////////////////////

// Generate a completely random behaviour
function randomBehaviour() {
  var out = []
  for (var i = 0; i<250; i++) {
    out.push(Math.random() * 180);
  }
  return out;
}

// Generate a behaviour based on sine wave
function sineBehaviour() {
  var out = [];
  var hz = 1/60;
  for (var i = 0; i<250; i++) {
    
    // get sine value
    var s = Math.sin(Math.PI * hz * i);

    // put in 0-180 range
    var sn = ((s + 1) / 2) * 180;

    out.push(Math.round(sn))
  }
  return out;
}

function generateBehaviour(b) {
  var out = [];
  b.forEach(function (element) {
    out.push(element * 180);
  });

  return out;
}


// var weightedSample = {
//   '1' : [0, 0.25],
//   '2' : [0.25, 1.0]
// }

// function aliasDistribution(d) {
//   var i = 1.0;

//   // Multiply 
//   for (e in d) {
//     i = i * ((d[e][1] -  * 100);
//   }
//   var arr = new Array(i);

//   for (var j = 0; j < arr.length; j++) {

//   }

// }